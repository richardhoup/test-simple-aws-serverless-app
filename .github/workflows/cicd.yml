name: CI/CD for build and deploy
on:
  push:
    branches:
      - deploy/gitops

# Add permissions for OIDC token
permissions:
  id-token: write
  contents: read

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use node 22.17.0
        uses: actions/setup-node@v2
        with:
          node-version: 22.17.0	
      - run: npm ci
  build:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.17.0]
    steps:
        - uses: actions/checkout@v3
        - name: Use node ${{ matrix.node-version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}
        - run: npm ci
        - run: npm run build
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Configure AWS credentials using OIDC - NO ACCESS KEYS NEEDED!
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          
      - name: Get application configuration from AWS Secrets Manager
        run: |
          # Retrieve application configuration (NOT credentials - OIDC handles auth)
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "${{ secrets.SECRET_NAME }}" --query SecretString --output text)
          
          # Only set non-credential environment variables
          echo "AWS_BUCKET_NAME=$(echo $SECRET_JSON | jq -r '.AWS_BUCKET_NAME')" >> $GITHUB_ENV
          echo "AWS_CLOUDFRONT_DISTRIBUTION_ID=$(echo $SECRET_JSON | jq -r '.AWS_CLOUDFRONT_DISTRIBUTION_ID')" >> $GITHUB_ENV
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.17.0
          
      - name: Deploy with S3 sync and Invalidate CloudFront cache
        run: |
          npm ci
          npm run build
          aws s3 sync ./out s3://${{ env.AWS_BUCKET_NAME }}/
          aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
